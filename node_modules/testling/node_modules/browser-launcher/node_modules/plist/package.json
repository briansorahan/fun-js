{
  "name": "plist",
  "description": "Mac OS X Plist parser for NodeJS. Convert a Plist file or string into a native JS object",
  "version": "0.2.1",
  "author": {
    "name": "Nathan Rajlich",
    "email": "nathan@tootallnate.net"
  },
  "contributors": [
    {
      "name": "Hans Huebner",
      "email": "hans.huebner@gmail.com"
    }
  ],
  "repository": {
    "type": "git",
    "url": "git://github.com/TooTallNate/node-plist.git"
  },
  "keywords": [
    "apple",
    "mac",
    "plist",
    "parser",
    "xml"
  ],
  "main": "./lib/plist",
  "dependencies": {
    "sax": "0.1.x"
  },
  "scripts": {
    "test": "for i in tests/test*.js; do node \"$i\"; done"
  },
  "engines": {
    "node": ">= 0.1.100"
  },
  "devDependencies": {},
  "readme": "node-plist\n==========\n\nThis library contains a parser for Mac OS X Plist (property list) files. These\nare often used in programming OS X and iOS applications, as well as the iTunes\nconfiguration XML file.\n\nPlist files represent stored programming \"object\"s. This makes them very similar\nin nature to a JSON file. A valid Plist file should be directly representable as\na native JavaScript Object.\n\nUsage\n-----\n\nExported are `parseFile` and `parseString` functions. Here's some examples:\n\n``` javascript\nvar plist = require('plist');\n\nplist.parseFile('myPlist.plist', function(err, obj) {\n  if (err) throw err;\n\n  console.log(JSON.stringify(obj));\n});\n```\n\nJust a `String` payload works as well:\n\n``` javascript\nvar plist = require('plist');\n\nplist.parseString('<plist><string>Hello World!</string></plist>', function(err, obj) {\n  if (err) throw err;\n\n  console.log(obj[0]);\n  // Hello World!\n});\n```\n",
  "_id": "plist@0.2.1",
  "dist": {
    "shasum": "db5e124aac8a77f46d87c6fbf237a702c3a09c7d"
  },
  "_from": "plist@0.2.1"
}
