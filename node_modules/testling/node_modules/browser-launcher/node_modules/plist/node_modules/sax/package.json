{
  "name": "sax",
  "author": {
    "name": "Isaac Z. Schlueter",
    "email": "i@izs.me"
  },
  "version": "0.1.5",
  "main": "lib/sax",
  "license": "MIT",
  "scripts": {
    "test": "node test/index.js"
  },
  "readme": "# sax js\n\nA sax-style parser for XML and HTML.\n\nDesigned with [node](http://nodejs.org/) in mind, but should work fine in the\nbrowser or other CommonJS implementations.\n\n## What This Is\n\n* A very simple tool to parse through an XML string.\n* A stepping stone to a streaming HTML parser.\n* A handy way to deal with RSS and other mostly-ok-but-kinda-broken XML docs.\n\n## What This Is (probably) Not\n\n* An HTML Parser - That's the goal, but this isn't it.  It's just XML for now.\n* A DOM Builder - You can use it to build an object model out of XML, but it doesn't\n  do that out of the box.\n* XSLT - No DOM, no querying.\n* 100% Compliant with (some other SAX implementation) - Most SAX implementations are\n  in Java and do a lot more than this does.\n* An XML Validator - It does a little validation when in strict mode, but not much.\n* A Schema-Aware XSD Thing - Schemas are an exercise in fetishistic masochism.\n* A DTD-aware Thing - Fetching DTDs is a much bigger job.\n\n## Regarding `<!DOCTYPE`s and `<!ENTITY`s\n\nThe parser will handle the basic XML entities in text nodes and attribute values:\n`&amp; &lt; &gt; &apos; &quot;`.  It's possible to define additional entities in XML\nby putting them in the DTD.  This parser doesn't do anything with that.  If you want\nto listen to the `ondoctype` event, and then fetch the doctypes, and read the entities\nand add them to `parser.ENTITIES`, then be my guest.\n\nUnknown entities will fail in strict mode, and in loose mode, will pass through unmolested.\n\n## Usage\n\n    var sax = require(\"./lib/sax\"),\n      strict = true, // set to false for html-mode\n      parser = sax.parser(strict);\n\n    parser.onerror = function (e) {\n      // an error happened.\n    };\n    parser.ontext = function (t) {\n      // got some text.  t is the string of text.\n    };\n    parser.onopentag = function (node) {\n      // opened a tag.  node has \"name\" and \"attributes\"\n    };\n    parser.onattribute = function (attr) {\n      // an attribute.  attr has \"name\" and \"value\"\n    };\n    parser.onend = function () {\n      // parser stream is done, and ready to have more stuff written to it.\n    };\n\n    parser.write('<xml>Hello, <who name=\"world\">world</who>!</xml>').close();\n\n## Arguments\n\nPass the following arguments to the parser function.  All are optional.\n\n`strict` - Boolean. Whether or not to be a jerk. Default: `false`.\n\n`opt` - Object bag of settings regarding string formatting.  All default to `false`.\nSettings supported:\n\n* `trim` - Boolean. Whether or not to trim text and comment nodes.\n* `normalize` - Boolean. If true, then turn any whitespace into a single space.\n* `lowercasetags` - Boolean. If true, then lowercase tags in loose mode, rather\n  than uppercasing them.\n\n## Methods\n\n`write` - Write bytes onto the stream. You don't have to do this all at once. You\ncan keep writing as much as you want.\n\n`close` - Close the stream. Once closed, no more data may be written until it is\ndone processing the buffer, which is signaled by the `end` event.\n\n`resume` - To gracefully handle errors, assign a listener to the `error` event. Then,\nwhen the error is taken care of, you can call `resume` to continue parsing.  Otherwise,\nthe parser will not continue while in an error state.\n\n## Members\n\nAt all times, the parser object will have the following members:\n\n`line`, `column`, `position` - Indications of the position in the XML document where\nthe parser currently is looking.\n\n`closed` - Boolean indicating whether or not the parser can be written to.  If it's\n`true`, then wait for the `ready` event to write again.\n\n`strict` - Boolean indicating whether or not the parser is a jerk.\n\n`opt` - Any options passed into the constructor.\n\nAnd a bunch of other stuff that you probably shouldn't touch.\n\n## Events\n\nAll events emit with a single argument. To listen to an event, assign a function to\n`on<eventname>`. Functions get executed in the this-context of the parser object.\nThe list of supported events are also in the exported `EVENTS` array.\n\n`error` - Indication that something bad happened. The error will be hanging out on\n`parser.error`, and must be deleted before parsing can continue. By listening to\nthis event, you can keep an eye on that kind of stuff. Note: this happens *much*\nmore in strict mode. Argument: instance of `Error`.\n\n`text` - Text node. Argument: string of text.\n\n`doctype` - The `<!DOCTYPE` declaration. Argument: doctype string.\n\n`processinginstruction` - Stuff like `<?xml foo=\"blerg\" ?>`. Argument: object with\n`name` and `body` members. Attributes are not parsed, as processing instructions\nhave implementation dependent semantics.\n\n`sgmldeclaration` - Random SGML declarations.  Stuff like `<!ENTITY p>` would trigger\nthis kind of event.  This is a weird thing to support, so it might go away at some\npoint.  SAX isn't intended to be used to parse SGML, after all.\n\n`opentag` - An opening tag. Argument: object with `name` and `attributes`. In\nnon-strict mode, tag names are uppercased.\n\n`closetag` - A closing tag. In loose mode, tags are auto-closed if their parent\ncloses. In strict mode, well-formedness is enforced.  Note that self-closing tags\nwill have `closeTag` emitted immediately after `openTag`.  Argument: tag name.\n\n`attribute` - An attribute node.  Argument: object with `name` and `value`.\n\n`comment` - A comment node.  Argument: the string of the comment.\n\n`opencdata` - The opening tag of a `<![CDATA[` block.\n\n`cdata` - The text of a `<![CDATA[` block.  Since `<![CDATA[` blocks can get quite large, this event\nmay fire multiple times for a single block, if it is broken up into multiple `write()`s.\nArgument: the string of random character data.\n\n`closecdata` - The closing tag (`]]>`) of a `<![CDATA[` block.\n\n`end` - Indication that the closed stream has ended.\n\n`ready` - Indication that the stream has reset, and is ready to be written to.\n\n## Todo\n\nBuild an HTML parser on top of this, which follows the same parsing rules as web browsers.\n\nMake it fast by replacing the trampoline with a switch, and not buffering so much\nstuff.\n",
  "_id": "sax@0.1.5",
  "description": "A sax-style parser for XML and HTML.",
  "dist": {
    "shasum": "f20c9234548519bb1b9b9972340683b7a6c0f472"
  },
  "_from": "sax@0.1.x"
}
