{
  "name": "testling",
  "description": "write tests for browser code",
  "version": "1.6.1",
  "repository": {
    "type": "git",
    "url": "git://github.com/substack/testling.git"
  },
  "main": "index.js",
  "browserify": "browser.js",
  "bin": {
    "testling": "bin/cmd.js"
  },
  "keywords": [
    "test",
    "browser",
    "headless"
  ],
  "scripts": {
    "prepublish": "mkdir -p bundle && browserify browser/prelude.js -o bundle/prelude.js"
  },
  "dependencies": {
    "jsonify": "~0.0.0",
    "optimist": "~0.5.2",
    "xhr-write-stream": "~0.1.2",
    "concat-stream": "~1.0.0",
    "tap-finished": "~0.0.0",
    "ecstatic": "~0.4.5",
    "browser-launcher": "~0.3.2",
    "browserify": "3.x.x",
    "resolve": "~0.4.0",
    "glob": "~3.2.1",
    "shell-quote": "~1.3.1",
    "ent": "~0.0.5",
    "bouncy": "~3.2.0",
    "shallow-copy": "~0.0.0",
    "object-inspect": "~0.1.3"
  },
  "devDependencies": {
    "tape": "~0.3.3"
  },
  "engines": {
    "node": ">=0.6"
  },
  "license": "MIT/X11",
  "author": {
    "name": "James Halliday",
    "email": "mail@substack.net",
    "url": "http://substack.net"
  },
  "readme": "# testling\n\nRun [testling-ci](http://ci.testling.com) tests locally.\n\n# example\n\nwrite a test:\n\n``` js\nvar test = require('tape');\n\ntest('beep boop', function (t) {\n    t.plan(2);\n    t.equal(1+1, 2);\n    t.ok(true);\n});\n```\n\nrun your test in a local headless browser:\n\n```\n$ browserify example/test.js | testling\n\nTAP version 13\n# beep boop\nok 1 should be equal\nok 2 (unnamed assert)\n\n1..2\n# tests 2\n# pass  2\n\n# ok\n```\n\nwith an exit code of 0 for successes and non-zero for failures like a good unix\ncitizen\n\nOnce you have a `package.json` with a configured `\"testling\"` field, you can just\ntype:\n\n```\n$ testling\n```\n\nto run all your tests locally just like they will be run on\n[testling-ci](https://ci.testling.com). This includes mocha harnesses, scripts,\nand files parameters.\n\n# usage\n\n```\nusage: testling {DIRECTORY|-} {OPTIONS}\n\nIf there (is no DIRECTORY and stdin is a tty) or the DIRECTORY is \"-\",\njavascript will be read from stdin and executed.\n\nOtherwise, DIRECTORY (or the $CWD) will be checked for a package.json with a\ntestling field.\n\nOPTIONS are:\n\n     --html  Instead of launching a server, show the generated html.\n     \n  --no-show  Don't render the console.log() output to the document body.\n \n         -u  Instead of launching a browser, print the url to visit so you can\n             open the browser yourself.\n\n         -x  Launch a browser with an explicit command. By default, chrome or\n             firefox is launched by searching your $PATH.\n```\n\n# testling field\n\n[Read more about how the package.json \"testling\" field works.](doc/testling_field.markdown)\n\n# code coverage\n\nTo compute code coverage, just use the\n[coverify](https://npmjs.org/package/coverify)\ntransform with `-t coverify` when you run browserify.\n\n[coverify](https://npmjs.org/package/coverify) writes coverage data with\nconsole.log(), so you can pipe the output of testling through to the `coverify`\ncommand to parse the results and give human-readable output:\n\n```\n$ browserify -t coverify test.js | testling | coverify\n\nTAP version 13\n# beep boop\nok 1 should be equal\n\n1..1\n# tests 1\n# pass  1\n\n# ok\n\n# /home/substack/projects/coverify/example/test.js: line 7, column 16-28\n\n  if (err) deadCode();\n           ^^^^^^^^^^^\n\n# /home/substack/projects/coverify/example/foo.js: line 3, column 35-48\n\n  if (i++ === 10 || (false && neverFires())) {\n                              ^^^^^^^^^^^^\n\n```\n\nThe exit code of coverify is non-zero when there are unreachable expressions.\n\n# install\n\nFirst, install `browserify` globally so that the `testling` command can find it\nwhen there is no `browserify` in `./node_modules/.bin`:\n\n```\nnpm install -g browserify\n```\n\nthen do:\n\n```\nnpm install -g testling\n```\n\n# license\n\nMIT\n\n![attack of the testlings!](http://substack.net/images/browsers/war_of_the_browsers.png)\n",
  "readmeFilename": "readme.markdown",
  "bugs": {
    "url": "https://github.com/substack/testling/issues"
  },
  "homepage": "https://github.com/substack/testling",
  "bundleDependencies": [
    "browser-launcher"
  ],
  "_id": "testling@1.6.1",
  "dist": {
    "shasum": "dbfc3fa8bbd06706f341366badf70dc1d518a6b8"
  },
  "_from": "testling@1.6.1",
  "_resolved": "https://registry.npmjs.org/testling/-/testling-1.6.1.tgz"
}
